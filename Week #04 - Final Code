#include <gtk/gtk.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <netdb.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <arpa/inet.h>
#include <pthread.h>
#include <fcntl.h>
#include <sys/shm.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <stdbool.h>
#include <semaphore.h>
#include <openssl/ssl.h>
#include <openssl/err.h>

#define SEM_NAME "/web_tab_ready"
#define MAX_CACHE_SIZE 15
#define MAX_HISTORY_SIZE 20

// Global Variables
pid_t tab_id[100];
char* url_id[100];
int counter = 0;
GtkWidget *window;
GtkWidget *Notebook, *Content_In_Page[100], *Page_Label[100];
int pipefd[2];
int cacheCount = 0;

// Struct Definitions
typedef struct {
    char url[256];
    char filename[50];
} CacheEntry;

typedef struct {
    char url[256];
} HistoryTable;

typedef struct {
    GtkWidget** label;
    GtkWidget** page; 
} gtk_Tab;

CacheEntry *cache;
HistoryTable *history;

// Function Prototypes
int handle_URL(char *url);
char *URLtoIPconverter(char url[256]);
int createSocket();
void connectToServer(int sockfd, char *ip);
void sendHTTPRequest(int sockfd, char *url);
int saveCacheMap(CacheEntry cache[], int count);
void saveCacheEntry(const char *url, const char *filename);
void updateCacheMap(int index, char *url, char* filename);

void saveResponseToFile(int sockfd, const char *url);
int loadFromCache(char *url);
int DisplayHistory();
void *HistoryReader(void *arg);
void *HistoryWriter(void *arg);
int HistoryWriterT(char url[]);
int HistoryReaderT();
gboolean graceful_shutdown();
void Tab_Reload(gpointer data);
gboolean check_shared_memory(gpointer user_data);
void *Read_URL(void *arg);

gboolean graceful_shutdown()
{
    // this function should. close window, kill all children(lmao), and finally exit main function somehow

    gtk_main_quit(); // this will close window
    
    return FALSE;
}

char *URLtoIPconverter(char url[256])
{
    printf("URL to IP converter\n");
    struct hostent *host = gethostbyname(url);
    if (host == NULL)
    {
        fprintf(stderr, "ERROR  Host Name Not Found.'\n");
        write(pipefd[1], "1", 1);
        return "error";
    }
    else
    {
        printf("URLto IP converter function successfully wrote\n");
        write(pipefd[1], "0", 1);
    }
    printf("returing from url to ip converter\n");
    return inet_ntoa(*((struct in_addr *)host->h_addr_list[0]));
}

int createSocket()
{
    int sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0)
    {
        perror("Socket creation failed");
        exit(1);
    }
    return sockfd;
}

int loadCacheMap(int *count)
{
    cache = (CacheEntry *)malloc(MAX_CACHE_SIZE * sizeof(CacheEntry));
    memset(cache, 0, MAX_CACHE_SIZE * sizeof(CacheEntry));

    FILE *fp = fopen("CacheMap.txt", "r");
    if (!fp)
    {
        *count = 0;
        printf("CacheMap.txt could not be opened...\n");
        return -1;
    }

    *count = 0;
    while (fscanf(fp, "%255s %49s\n", cache[*count].url, cache[*count].filename) == 2)
    {
        (*count)++;
        if (*count >= MAX_CACHE_SIZE)
            break;
    }

    fclose(fp);

    return 0;
}

void connectToServer(int sockfd, char *ip)
{
    struct sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(80);
    inet_pton(AF_INET, ip, &server_addr.sin_addr);

    if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0)
    {
        perror("Connection failed");
        exit(1);
    }

    printf("Connected to %s on port 80\n", ip);
}

void sendHTTPRequest(int sockfd, char *url)
{
    char request[1024];
    sprintf(request, "GET / HTTP/1.1\r\nHost: %s\r\nConnection: close\r\n\r\n", url);
    send(sockfd, request, strlen(request), 0);
    printf("HTTP request sent!\n");
}

int saveCacheMap(CacheEntry cache[], int count)
{
    FILE *fp = fopen("CacheMap.txt", "w");
    if (!fp)
        return -1;
    for (int i = 0; i < count; i++)
    {
        fprintf(fp, "%s %s\n", cache[i].url, cache[i].filename);
    }
    fclose(fp);
    return 0;
}

void saveCacheEntry(const char *url, const char *filename)
{
    int currentCount = 0;
    loadCacheMap(&currentCount); // Load fresh every time

    for (int i = (currentCount < MAX_CACHE_SIZE ? currentCount : MAX_CACHE_SIZE - 1); i > 0; i--)
    {
        cache[i] = cache[i - 1];
    }

    strncpy(cache[0].url, url, sizeof(cache[0].url) - 1);
    strncpy(cache[0].filename, filename, sizeof(cache[0].filename) - 1);
    cache[0].url[sizeof(cache[0].url) - 1] = '\0';
    cache[0].filename[sizeof(cache[0].filename) - 1] = '\0';

    if (currentCount < MAX_CACHE_SIZE)
    {
        currentCount++;
    }

    FILE *countFile = fopen("CacheCount.txt", "w");
    if (countFile)
    {
        fprintf(countFile, "%d", currentCount);
        fclose(countFile);
    }

    saveCacheMap(cache, currentCount);
}

void updateCacheMap(int index, char *url, char* filename) {
    int currentcount = 0;
    loadCacheMap(&currentcount);
    for (int i = index; i >= 1; i--) {
       
        cache[i] = cache[i - 1];
        
    }
    
    strncpy(cache[0].url, url, sizeof(cache[0].url) - 1);
    strncpy(cache[0].filename, filename, sizeof(cache[0].filename) - 1);
    cache[0].url[sizeof(cache[0].url) - 1] = '\0';
    cache[0].filename[sizeof(cache[0].filename) - 1] = '\0';

    
    
    FILE* file = fopen("CacheCount.txt", "r");
    if (file) { 
        fprintf(file, "%d", cacheCount);
        fclose(file);
        saveCacheMap(cache, cacheCount);
    }
    
    

}

void saveResponseToFile(int sockfd, const char *url)
{

    char filename[50];
    snprintf(filename, sizeof(filename), "Cache/%s.html", url);

    char buffer[4096];
    int bytes_received;
    FILE *file = fopen(filename, "w");

    if (file == NULL)
    {
        perror("File opening failed stuck here");
        close(sockfd);
        exit(1);
    }

    // set up IPC
    char *name = "/Web_Data";
    const int SIZE = 4096 * 32;
    int fd = shm_open(name, O_CREAT | O_RDWR, 0666);
    if (fd == -1)
    {
        perror("shm_open failed when trying to write");
        exit(EXIT_FAILURE);
    }

    if (ftruncate(fd, SIZE) == -1)
    {
        perror("ftruncate failed");
        close(fd);
        shm_unlink(name); // Clean up if it failed
        exit(EXIT_FAILURE);
    }

    char *ptr = mmap(NULL, SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
    if (ptr == MAP_FAILED)
    {
        perror("mmap failed");
        close(fd);
        shm_unlink(name);
        exit(EXIT_FAILURE);
    }

    memset(ptr, 0, SIZE);

    while ((bytes_received = recv(sockfd, buffer, sizeof(buffer) - 1, 0)) > 0)
    {
        buffer[bytes_received] = '\0';
        fwrite(buffer, 1, bytes_received, file);

        // this section will write the data to a shared memory
        sprintf(ptr, "%s", buffer);
        ptr += strlen(buffer);
    }

    fclose(file);
    close(fd);
    printf("\n\n\nResponse received. File saved.\n");

    sem_t *sem = sem_open(SEM_NAME, O_CREAT, 0666, 0);
    if (sem == SEM_FAILED)
    {
        perror("sem_open failed in child");
        exit(1);
    }
    sem_post(sem);
    sem_close(sem);
    // Save cache entry (only metadata)
    // saveCacheEntry(url, filename);
}

int loadFromCache(char *url)
{
    if (cache == NULL)
    {
        printf("Cache is null\n");
        char filename[50];
        snprintf(filename, sizeof(filename), "Cache/%s.html", url);

        saveCacheEntry(url, filename);
         return -1;
    }
    int currentcounter = 0;
    loadCacheMap(&currentcounter);
    for (int i = 0; i < MAX_CACHE_SIZE; i++)
    {
        if (strcmp(cache[i].url, url) == 0)
        {
            updateCacheMap(i, cache[i].url, cache[i].filename);
            

            // load from cache using cache.filename
            char filename[256];
            snprintf(filename, sizeof(filename), "Cache/%.*s.html", (int)(sizeof(filename) - 12), cache[0].url);

            char *buffer = (char *)malloc(4096 * sizeof(buffer));
            ssize_t bytes_received;
            FILE *file = fopen(filename, "r");

            if (file == NULL)
            {
                perror("Cache file for url could not be opened..");
                return -1;
            }
    
            // set up IPC
            char *name = "/Web_Data";
            const int SIZE = 4096 * 32;
            int fd = shm_open(name, O_CREAT | O_RDWR, 0666);
            if (fd == -1)
            {
                perror("shm_open failed when trying to write");
                exit(EXIT_FAILURE);
            }

            if (ftruncate(fd, SIZE) == -1)
            {
                perror("ftruncate failed");
                close(fd);
                shm_unlink(name); // Clean up if it failed
                exit(EXIT_FAILURE);
            }

            char *ptr = mmap(NULL, SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
            if (ptr == MAP_FAILED)
            {
                perror("mmap failed");
                close(fd);
                shm_unlink(name);
                exit(EXIT_FAILURE);
            }

            memset(ptr, 0, SIZE);
            size_t bufsize = 0;
            while ((bytes_received = getline(&buffer, &bufsize, file)) > 0)
            {
                // this section will write the data to a shared memory
                sprintf(ptr, "%s", buffer);
                ptr += strlen(buffer);
            }
            free(buffer);
            fclose(file);
            close(fd);

            sem_t *sem = sem_open(SEM_NAME, O_CREAT, 0666, 0);
            if (sem == SEM_FAILED)
            {
                perror("sem_open failed in child");
                exit(1);
            }
            sem_post(sem);
            sem_close(sem);
    
            return 0;
        }
        else
        {
            continue; // cache miss
        }
    }
    char filename[50];
    snprintf(filename, sizeof(filename), "Cache/%s.html", url);

    saveCacheEntry(url, filename); 
    return -1;
}

int DisplayHistory()
{
    int returnval1 = HistoryReaderT();
    printf("History: \n");
    int HistoryCount = 0;
    for (int i = 0; history[i].url[0] != '\0'; i++)
    {
        printf("%i. %s\n", i + 1, history[i].url);
        HistoryCount++;
    }

error1:
    printf("Enter the number corresponding to the url that you want to revisit or Enter 0 to go back to Home Page: ");
    int urlchoice;
    scanf("%i", &urlchoice);
    getchar();
    int returnval;
    
    if (urlchoice == 0)
    {
        return urlchoice;
    }
    else if (urlchoice > 0 && urlchoice<=HistoryCount)
    {
        printf("History Count: %i\n", HistoryCount);
        url_id[counter] = malloc(strlen(history[urlchoice-1].url) + 1);
        strcpy(url_id[counter], history[urlchoice-1].url);
        counter++;
        returnval = handle_URL(history[urlchoice-1].url);
    }
    else
    {
        printf("Invalid input, entered number exceeds the number of entries in History..\n\n");
        goto error1;
    }

    return urlchoice;
}

void *HistoryReader(void *arg)
{
    history = (HistoryTable *)malloc(MAX_HISTORY_SIZE * sizeof(HistoryTable));
    if (!history)
    {
        perror("Initial History malloc failed");
        long *ret = malloc(sizeof(long));
        if (ret)
            *ret = -1;
        return (void *)ret;
    }
    memset(history, 0, MAX_HISTORY_SIZE * sizeof(HistoryTable)); // important!

    char *filename = (char *)arg;
    FILE *fp = fopen(filename, "r");
    if (fp == NULL)
    {
        fprintf(stderr, "File could not be opened.\n");
        long *ret = malloc(sizeof(long));
        if (ret)
            *ret = -1;
        return (void *)ret;
    }

    char *url = NULL;
    size_t sizeofURL = 0;
    ssize_t BytesRead = 0;
    int index = 0;
    int reallocCount = 1;

    while ((BytesRead = getline(&url, &sizeofURL, fp)) != -1)
    {
        if (index < reallocCount * MAX_HISTORY_SIZE)
        {
            strcpy(history[index].url, url);
        }
        else
        {
            reallocCount++;
            HistoryTable *temp = realloc(history, reallocCount * MAX_HISTORY_SIZE * sizeof(HistoryTable));
            if (temp == NULL)
            {
                perror("History Realloc failed");
                free(history);
                long *ret = malloc(sizeof(long));
                if (ret)
                    *ret = -1;
                return (void *)ret;
            }
            history = temp;

            // zero out the newly allocated portion
            memset(&history[(reallocCount - 1) * MAX_HISTORY_SIZE], 0, MAX_HISTORY_SIZE * sizeof(HistoryTable));
            strcpy(history[index].url, url);
        }
        index++;
    }

    fclose(fp);
    free(url);

    long *ret = malloc(sizeof(long));
    if (ret)
        *ret = 0;
    return (void *)ret;
}

void *HistoryWriter(void *arg)
{
    char *new_url = (char *)arg;

    FILE *fp = fopen("History.txt", "r");
    if (fp == NULL)
    {
        // File doesn't exist yet. Just write the new URL.
        fp = fopen("History.txt", "w");
        if (!fp)
        {
            perror("File creation failed");
            return (void *)1;
        }
        fprintf(fp, "%s\n", new_url);
        fclose(fp);
        return NULL;
    }

    // Read existing history
    fseek(fp, 0, SEEK_END);
    long filesize = ftell(fp);
    fseek(fp, 0, SEEK_SET);

    char *old_content = malloc(filesize + 1);
    if (!old_content)
    {
        perror("Memory allocation failed");
        fclose(fp);
        return (void *)1;
    }

    fread(old_content, 1, filesize, fp);
    old_content[filesize] = '\0';
    fclose(fp);

    // Overwrite file and write new URL first
    fp = fopen("History.txt", "w");
    if (!fp)
    {
        perror("File open for write failed");
        free(old_content);
        return (void *)1;
    }

    fprintf(fp, "%s\n", new_url);   // write new URL at the top
    fprintf(fp, "%s", old_content); // write previous content after
    fclose(fp);
    free(old_content);

    return NULL;
}

int HistoryWriterT(char url[])
{
    // saving history: urls are saved one by one in history.txt
    pthread_t t1;
    int rc1 = pthread_create(&t1, NULL, HistoryWriter, (void *)url);
    if (rc1 != 0)
    {
        printf("History Writer thread could not be created\n");
        return -1;
    }

    long *returnval;
    pthread_join(t1, (void **)&returnval);
    if (returnval != NULL && *returnval == 1)
    {
        free(returnval);
        return -1;
    }
}

int HistoryReaderT()
{
    char filename[] = "History.txt";
    pthread_t t2; // thread for history reader functionality
    int rc2 = pthread_create(&t2, NULL, HistoryReader, (void *)filename);
    if (rc2 != 0)
    {
        printf("History Reader thread could not be created\n");
        return -1;
    }

    long *returnval2;
    pthread_join(t2, (void **)&returnval2);
    if (returnval2 == NULL || *returnval2 == -1)
    {
        return -1;
    }
    free(returnval2);
    return 0;
}

int handle_URL(char *url)
{
    url[strcspn(url, "\n")] = 0;
    // check for cache hit:
    if (loadFromCache(url) == -1) // cache miss
    {
        printf("Cache Count: %d \n", cacheCount);
        char *ip = URLtoIPconverter(url);
        if (strcmp(ip, "error") == 0)
            return 1;

        printf("IP address of %s is %s\n", url, ip);

        int sockfd = createSocket();

        connectToServer(sockfd, ip);
        sendHTTPRequest(sockfd, url);
        saveResponseToFile(sockfd, url);
        close(sockfd);
    }
    int returnval1 = HistoryWriterT(url);
}

void *Read_URL(void *arg) // Worker Thread To constantly await URL in main terminal
{
    char url[256];

    while (1)
    {
        printf("Enter a string : ");
        fgets(url, sizeof(url), stdin);
        url[strcspn(url, "\n")] = '\0';
        if (strcmp(url, "exit") == 0)
        {
            break;
        }
        else if (strcmp(url, "history") == 0) // USER CAN VIEW HISTORY FROM HERE
        {
            int returnval4 = DisplayHistory();
        }
        else
        {
            pipe(pipefd);
            char *flag;
            url_id[counter] = malloc(strlen(url) + 1);
            strcpy(url_id[counter], url);
            tab_id[counter] = fork();
            if (tab_id[counter] < 0)
            {
                printf("Error Creating Process for Tab!\n");
                exit(1);
            }
            else if (tab_id[counter] == 0)
            {
                close(pipefd[0]);
                if (handle_URL(url) == 1)
                {
                   
                    exit(0);
                }
                else
                {
                    
                    exit(0); // To be Changed
                }
            }
            close(pipefd[1]);
            counter++;
            sleep(1);
          
            read(pipefd[0], flag, 1);
        
            if (atoi(flag) == 1)
            {
                counter--;
            }
        }
    }
   
    pthread_exit(NULL);
}

void Tab_Reload(gpointer data)
{
    gtk_Tab* Tab_data = (gtk_Tab*)data;
    const char *str = gtk_label_get_text(GTK_LABEL(*Tab_data->label)); 
    int counter_n = str[strlen(str)-1] - 49;
    //char* url = tab_id[counter_n];

   printf("\n%s %d\n",url_id[counter_n], counter_n);
    url_id[counter_n][strcspn(url_id[counter_n], "\n")] = 0;

    char *ip = URLtoIPconverter(url_id[counter_n]);
    if (strcmp(ip, "error") == 0)
        return ;

    printf("IP address of %s is %s\n", url_id[counter_n], ip);

    int sockfd = createSocket();

    connectToServer(sockfd, ip);
    sendHTTPRequest(sockfd, url_id[counter_n]);

    char buffer[4096*32];
    recv(sockfd, buffer, sizeof(buffer) - 1, 0);
    buffer[strlen(buffer)] = '\0';

    GtkTextBuffer *gtkbuffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(*Tab_data->page));
    gtk_text_buffer_set_text(gtkbuffer, buffer, -1);
    close(sockfd);
}

gboolean check_shared_memory(gpointer user_data) // checks for new tab via counter Periodically
{
    // handle synchronization to handle parallelism
    // static int last_counter = 0;

    char *ptr;
    int SIZE = 4096 * 32;
    char *name = "/Web_Data";

    sem_t *sem = sem_open(SEM_NAME, O_CREAT, 0666, 0); // Because this function is called presistently sem has to open repeatedly and closed. causing overhead. Fix if time
    if (sem == SEM_FAILED)
    {
        perror("sem_open failed in main");
        exit(1);
    }
    // if(last_counter < counter)
    if (sem_trywait(sem) == 0)
    {
        int fd = shm_open(name, O_RDONLY, 0666);
        if (fd == -1)
        {
            perror("shm_open failed in main");
            exit(EXIT_FAILURE);
        }

        ptr = (char *)mmap(0, SIZE, PROT_READ, MAP_SHARED, fd, 0);
        if (ptr == MAP_FAILED)
        {
            perror("mmap failed");
            close(fd);
            shm_unlink(name);
            exit(EXIT_FAILURE);
        }

        char str[16];
        sprintf(str, "Tab %d", counter);
    
        Page_Label[counter-1] = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 2);
        GtkWidget* label = gtk_label_new(str);

        GtkWidget* closeButton = gtk_button_new();
        GdkPixbuf *pixbuf = gdk_pixbuf_new_from_file_at_scale("/home/kumail/Desktop/OS Project/closeIcone.png", 16, 16, TRUE, NULL);
        GtkWidget* closeIcon = gtk_image_new_from_pixbuf(pixbuf); // insert image path here
        g_object_unref(pixbuf);
        gtk_button_set_relief(GTK_BUTTON(closeButton), GTK_RELIEF_NONE);
        gtk_button_set_image(GTK_BUTTON(closeButton), closeIcon);
        gtk_widget_set_focus_on_click(closeButton, FALSE);

        GtkWidget* ReloadButton = gtk_button_new();
        pixbuf = gdk_pixbuf_new_from_file_at_scale("/home/kumail/Desktop/OS Project/reloadIcon.png", 16, 16, TRUE, NULL);
        GtkWidget* ReloadIcon = gtk_image_new_from_pixbuf(pixbuf); // insert image path here
        g_object_unref(pixbuf);
        gtk_button_set_relief(GTK_BUTTON(ReloadButton), GTK_RELIEF_NONE);
        gtk_button_set_image(GTK_BUTTON(ReloadButton), ReloadIcon);
        gtk_widget_set_focus_on_click(ReloadButton, FALSE);

        gtk_box_pack_start(GTK_BOX(Page_Label[counter-1]), label, FALSE, FALSE,0); // test expand and fill parametes
        gtk_box_pack_start(GTK_BOX(Page_Label[counter-1]), ReloadButton, FALSE, FALSE,1);
        gtk_box_pack_start(GTK_BOX(Page_Label[counter-1]), closeButton, FALSE, FALSE,1);

        gtk_widget_show_all(Page_Label[counter-1]);

        GtkWidget *scrolled_window = gtk_scrolled_window_new(NULL, NULL);
        gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(scrolled_window), GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);

        Content_In_Page[counter-1] = gtk_text_view_new();
        gtk_text_view_set_wrap_mode(GTK_TEXT_VIEW(Content_In_Page[counter-1]), GTK_WRAP_WORD);
        gtk_text_view_set_editable(GTK_TEXT_VIEW(Content_In_Page[counter-1]), FALSE);
        gtk_text_view_set_cursor_visible(GTK_TEXT_VIEW(Content_In_Page[counter-1]), FALSE);

        GtkTextBuffer *buffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(Content_In_Page[counter-1]));
        gtk_text_buffer_set_text(buffer, ptr, -1);

        gtk_container_add(GTK_CONTAINER(scrolled_window), Content_In_Page[counter-1]);

        gtk_Tab* Tab_data = malloc(sizeof(gtk_Tab));
        Tab_data->label = malloc(sizeof(GtkWidget*));
        *(Tab_data->label) = label;
        Tab_data->page = malloc(sizeof(GtkWidget*));
        *(Tab_data->page) = Content_In_Page[counter-1];
        g_signal_connect_swapped(ReloadButton, "clicked", G_CALLBACK(Tab_Reload), Tab_data);

        g_signal_connect_swapped(closeButton, "clicked", G_CALLBACK(gtk_widget_destroy), scrolled_window);

        gtk_notebook_append_page(GTK_NOTEBOOK(Notebook), scrolled_window, Page_Label[counter-1]);

        // last_counter = counter;
    }
    gtk_widget_show_all(window);
    sem_close(sem);
    return TRUE;
}

int main(int argc, char *argv[])
{
    int returnval2 = HistoryReaderT();


    int returnval3 = loadCacheMap(&cacheCount);
    if (returnval3 == -1)
    {
        return -1;
    }
    // printf("%d entries currently in cache.\n", cacheCount);
    // for (int i = 0; i < MAX_CACHE_SIZE; i++)
    // {
    //     printf("%s : %s\n", cache[i].url, cache[i].filename);
    // }
    // printf("\n");

    pthread_t Worker_threadID;
    int r = pthread_create(&Worker_threadID, NULL, Read_URL, NULL);

    // Set Up GTK GUI
    gtk_init(&argc, &argv);

    window = gtk_window_new(GTK_WINDOW_TOPLEVEL);                                  // create main window
    g_signal_connect(window, "delete_event", G_CALLBACK(graceful_shutdown), NULL); // handles exit(cross) button of window
    gtk_window_set_default_size(GTK_WINDOW(window), 750, 200);
    Notebook = gtk_notebook_new();
    gtk_notebook_set_tab_pos(GTK_NOTEBOOK(Notebook), GTK_POS_TOP);
    gtk_container_add(GTK_CONTAINER(window), Notebook);

    g_timeout_add(500, check_shared_memory, NULL);

    gtk_widget_show_all(window);
    gtk_main();

    return 0;
}
